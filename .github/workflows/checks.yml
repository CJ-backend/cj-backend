name: Code Quality Checks

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  ci:
    # 가장 최신버젼의 ubuntu를 OS 환경으로 설정
    runs-on: ubuntu-latest

    # 모든 스텝에서 아래 env 를 읽을 수 있게 해 줍니다.
    env:
      POSTGRES_DB:      ${{ secrets.POSTGRES_DB }}
      POSTGRES_USER:    ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_HOST:    ${{ secrets.POSTGRES_HOST }}
      POSTGRES_PORT:    ${{ secrets.POSTGRES_PORT }}

    # services 키워드를 사용하여 PostgreSQL 서비스를 설정
    services:
      db:
        image: postgres:14
        ports: [ 5432:5432 ]
        # Github Secrets에서 가져와서 env로 등록, Postgres 데이터 베이스 연결 설정
        env:
          POSTGRES_DB:      ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER:    ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        # 옵션으로 postgres의 연결 상태를 확인. 10초 단위로 5번 재시도. 5초간 기다림.
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    # CI 환경에서 코드를 체크아웃합니다.
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      # CI 환경에서 사용할 파이썬 버젼을 지정합니다.
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Create virtual environment
        run: uv venv

      - name: Install packages & dev deps
        run: uv pip install ".[dev]"

      - name: Install Simple JWT dependency
        run: uv pip install djangorestframework-simplejwt

      # isort를 사용하여 import 구문의 정렬 순서를 체크합니다.
      - name: Run isort
        run: uv run isort . --check --diff
      # black을 사용하여 PEP8 코드스타일을 준수했는지 체크합니다.
      - name: Run black
        run: uv run black . --check
      # db 연결을 테스트
      - name: Wait for PostgreSQL
        # env 는 이미 위 job-level 에서 정의되어 있으므로 여기선 바로 참조 가능
        run: |
          until pg_isready -h ${{ env.POSTGRES_HOST }} \
                           -p ${{ env.POSTGRES_PORT }} \
                           -U ${{ env.POSTGRES_USER }}; do
            echo "Waiting for Postgres…"
            sleep 1
          done
      # 정상적인 db연결을 확인했으니 마이그레이션 수행
      - name: Run migrations
        run: |
          uv run python manage.py makemigrations
          uv run python manage.py migrate

      - name: Run tests
        run: uv run python manage.py test